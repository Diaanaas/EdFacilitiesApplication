@using System.Text.Json;
@using System.Net;

@model IEnumerable<EdFacilitiesApplication.Models.Facility>

@{
    ViewData["Title"] = "Index";
}

<h1>@ViewBag.CategoryName facilities</h1>

<p>
    <a asp-action="Create" asp-route-id="@ViewBag.CategoryId">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Description)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Location)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Description)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Location)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>

<div class="mapWrapper">
    <div id="map"></div>
</div>

@section scripts{
    <script>
        async function fetchAndInitializeMap() {   
            const locations = await fetchData();   // get all locations
            const map = createMap(locations);      // get map for locations
            addMarkers(map, locations);            // add marker for map
        }

        async function fetchData() {
            const model = @Html.Raw(JsonSerializer.Serialize(Model));
            const locations = [];

            for (const item of model) {
                const uri = item.Location;
                const name = item.Name;
                const resolvedUrl = await unshortenURL(uri);

                if (resolvedUrl) {
                    const [lat, lng] = getLatLngFromResolvedURL(resolvedUrl);
                    locations.push({ ll: { lat, lng }, name });
                } else {
                    console.log("Failed to unshorten URL for:", name);
                }
            }

            return locations;
        }

        async function unshortenURL(uri) {
            try {
                const apiUrl = `https://unshorten.me/json/${encodeURIComponent(uri)}`;
                const response = await fetch(apiUrl);
                const data = await response.json();

                if (data.success && data.resolved_url) {
                    return data.resolved_url;
                }
            } catch (error) {
                console.error("Error unshortening URL:", error);
            }

            return null;
        }

        function getLatLngFromResolvedURL(resolvedURL) {
            const at = "@@";
            const [lat, lng] = resolvedURL.split(at)[1].split(',');
            return [parseFloat(lat), parseFloat(lng)];
        }

        function createMap(locations) {
            console.log(locations);
            const map = new google.maps.Map(document.getElementById("map"), {
                zoom: 12,
                center: locations[0].ll,
                fullscreenControl: false,
                zoomControl: true,
                streetViewControl: false
            });
            return map;
        }

        function addMarkers(map, locations) {
            locations.forEach(data => {
                const text = data.name + "";
                const infowindow = new google.maps.InfoWindow({
                    content: `<span>${text}</span>`
                });
                const marker = new google.maps.Marker({
                    position: data.ll,
                    map,
                    title: data.name
                });

                google.maps.event.addListener(marker, 'mouseover', function () {
                    infowindow.open(map, marker);
                });
            });
        }

        fetchAndInitializeMap();
    </script>
}